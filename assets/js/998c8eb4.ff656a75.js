(self.webpackChunkjoyce_docs=self.webpackChunkjoyce_docs||[]).push([[973],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return u}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=l(n),u=r,d=m["".concat(c,".").concat(u)]||m[u]||h[u]||o;return n?a.createElement(d,s(s({ref:t},p),{},{components:n})):a.createElement(d,s({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6158:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return i},toc:function(){return c},default:function(){return p}});var a=n(2122),r=n(9756),o=(n(7294),n(3905)),s={},i={type:"mdx",permalink:"/joyce/tutorial-rss",source:"@site/src/pages/tutorial-rss.md"},c=[{value:"Goal",id:"goal",children:[]},{value:"Setup",id:"setup",children:[]},{value:"Kafka Connectors",id:"kafka-connectors",children:[]},{value:"Transformation Handlers",id:"transformation-handlers",children:[{value:"Categorization of the content",id:"categorization-of-the-content",children:[]},{value:"Enrich with open graph data",id:"enrich-with-open-graph-data",children:[]}]},{value:"Expose the rest api",id:"expose-the-rest-api",children:[]},{value:"Add other sources",id:"add-other-sources",children:[]},{value:"Conclusion",id:"conclusion",children:[]}],l={toc:c};function p(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"how-to-build-an-api-that-enrich-and-aggregates-rss-feeds"},"How to build an API that enrich and aggregates rss feeds."),(0,o.kt)("p",null,"This tutorial is a practical, non trivial, real world example of how you can use Joyce platform.",(0,o.kt)("br",{parentName:"p"}),"\n","We'll go step by step through the creation a complete flow of data integration and serving of a final API."),(0,o.kt)("h2",{id:"goal"},"Goal"),(0,o.kt)("p",null,"We want to realize an api that aggregates several rss feeds and enrich them extracting topics and categorization of the link that arrives.\nOur source will be IT news sites:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"http://feeds.arstechnica.com/arstechnica/index/"},"http://feeds.arstechnica.com/arstechnica/index/")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.engadget.com/rss.xml"},"https://www.engadget.com/rss.xml")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://hnrss.org/newest?points=100"},"https://hnrss.org/newest?points=100"))),(0,o.kt)("h2",{id:"setup"},"Setup"),(0,o.kt)("p",null,"You'll need to have docker installed, we'll be using docker-compose to startup a minimal installation of Joyce."),(0,o.kt)("p",null,"Let's begin:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir rss-aggregator\ncd rss-aggregator\nwget https://raw.githubusercontent.com/sourcesense/joyce-compose/master/docker-compose.yaml\n\ndocker-compose up -d\n")),(0,o.kt)("h1",{id:"modeling-our-sources"},"Modeling our sources"),(0,o.kt)("p",null,"We start by modeling our data with a Joyce ",(0,o.kt)("a",{parentName:"p",href:"/docs/schema"},"schema"),", and configuring how to pull data from the rss feed with a ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/kaliy/kafka-connect-rss/blob/master/README.md"},"Kafka Connect RSS source connector")," configuration inside the schema."),(0,o.kt)("p",null,"As you can read from the documentation, the connector produce json with this form:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "feed": {\n    "title": "CNN.com - RSS Channel - App International Edition",\n    "url": "http://rss.cnn.com/rss/edition.rss"\n  },\n  "title": "The 56,000-mile electric car journey",\n  "id": "https://www.cnn.com/2019/03/22/motorsport/electric-car-around-the-world-wiebe-wakker-spt-intl/index.html",\n  "link": "https://www.cnn.com/2019/03/22/motorsport/electric-car-around-the-world-wiebe-wakker-spt-intl/index.html",\n  "content": "For three years and 90,000 kilometers and counting, he\'s traveled the world powered both by electricity and strangers\' kindness.",\n  "author": "CNN",\n  "date": "2019-03-22T13:34:17Z"\n}\n')),(0,o.kt)("p",null,"It's trivial to write a schema that reshape this content, save this to ",(0,o.kt)("inlineCode",{parentName:"p"},"news.yaml"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'$schema: https://joyce.sourcesense.com/v1/schema\n$metadata:\n  subtype: import\n  namespace: default\n  name: technology-news\n  description: Technology  news from rss feeds\n  development: true\n  collection: technology-news\n  validation: false\n  uid: link\n  extra:\n    connectors: \n      - name: arstechnica\n        importKeyUid: link\n        config:\n          connector.class: "org.kaliy.kafka.connect.rss.RssSourceConnector"\n          rss.urls: "http://feeds.arstechnica.com/arstechnica/index/"\n          topic: "joyce_import"\ntype: object\nproperties:\n  link:\n    type: string\n  title:\n    type: string\n  date:\n    type: string\n  summary:\n    type: string\n    $path: $.content\n  source:\n    type: string\n    $path: $.feed.title\n')),(0,o.kt)("p",null,"And than send it to the import-gateway:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST -H "Content-Type: application/x-yaml" --data-binary @news.yaml http://localhost:6651/api/schema\n')),(0,o.kt)("p",null,"You'll see this output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "schemaUri": "joyce://schema/import/default.technology-news",\n  "connectors": [\n    {\n      "name": "default.technology-news.arstechnica",\n      "connectorOperation": "CREATE",\n      "status": "CREATED",\n      "body": {\n        "name": "default.technology-news.arstechnica",\n        "config": {\n          "connector.class": "org.kaliy.kafka.connect.rss.RssSourceConnector",\n          "rss.urls": "https://techcrunch.com/feed",\n          "topic": "joyce_import",\n          "transforms": "joyceKey",\n          "transforms.joyceKey.uid": "link",\n          "transforms.joyceKey.source": "arstechnica",\n          "transforms.joyceKey.schema": "joyce://schema/import/default.technology-news",\n          "transforms.joyceKey.type": "com.sourcesense.joyce.connect.custom.InsertJoyceMessageKey",\n          "name": "default.technology-news.arstechnica"\n        },\n        "tasks": [],\n        "type": "source"\n      }\n    }\n  ]\n}\n')),(0,o.kt)("h2",{id:"kafka-connectors"},"Kafka Connectors"),(0,o.kt)("p",null,"A lot already happened, not only the schema is saved, but giving the configuration of the connector, a kafka connect task with the specific configuration is created and started."),(0,o.kt)("p",null,"This means that if we didn't do anything wrong in the schema transofrmation, content is already pumped through joyce and correctly transformed."),(0,o.kt)("p",null,"Head over ",(0,o.kt)("a",{parentName:"p",href:"http://localhost:6680/ui"},"akhq")," and look at the content of ",(0,o.kt)("inlineCode",{parentName:"p"},"joyce_content")," topic, you'll see messages from the rss feed already processed."),(0,o.kt)("p",null,"Import Gateway expose ",(0,o.kt)("a",{parentName:"p",href:"/docs/import-gateway#connectors-api"},"different endpoints")," to control and check the status of the connectors within a schema."),(0,o.kt)("p",null,"Now pause the connector, because we want to enrich the schema with more complex transformation:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"curl -X  PUT http://localhost:6651/api/schema/import/default/technology-news/connectors/arstechnica/pause\n")),(0,o.kt)("h2",{id:"transformation-handlers"},"Transformation Handlers"),(0,o.kt)("p",null,"The result of the transoformation is good, but we want to enrich what arrives from the rss feeds, we miss few things to have a nice api:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a categorization of the content."),(0,o.kt)("li",{parentName:"ul"},"an image for the article if we can get to it."),(0,o.kt)("li",{parentName:"ul"},"a summary more relevant than what could arrive from the feed.")),(0,o.kt)("p",null,"How can we do it? We'll be using the power of joyce ",(0,o.kt)("a",{parentName:"p",href:"/docs/schema#handlers"},"transformation handlers"),", in particular  ",(0,o.kt)("strong",{parentName:"p"},"$script")," and ",(0,o.kt)("strong",{parentName:"p"},"$rest"),".",(0,o.kt)("br",{parentName:"p"}),"\n","Let's see how."),(0,o.kt)("h3",{id:"categorization-of-the-content"},"Categorization of the content"),(0,o.kt)("p",null,"We need to extracts topics from the article text, there are tons of way to do it with NLP libraries and custom code, but we go'll the short way and use a service that does it with an exposed API."),(0,o.kt)("p",null,"Head over ",(0,o.kt)("a",{parentName:"p",href:"https://www.textrazor.com/signup"},"https://www.textrazor.com/signup")," and signup for a free account, you'll obtain an api token that is everything we need to use their service.",(0,o.kt)("br",{parentName:"p"}),"\n","Have a look at their ",(0,o.kt)("a",{parentName:"p",href:"https://www.textrazor.com/docs/rest"},"rest api documentation")," and try this call to extract topics from a random link:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n    -H "x-textrazor-key: YOURAPIKEY" \\\n    -d "extractors=topics" \\\n    -d "url=https://tenthousandmeters.com/blog/python-behind-the-scenes-13-the-gil-and-its-effects-on-python-multithreading/" \\\n    https://api.textrazor.com/\n')),(0,o.kt)("p",null,"We are ready to enrich our imported model with topics by using this call inside the schema using ",(0,o.kt)("inlineCode",{parentName:"p"},"$rest")," handler, add this field to your Schema:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'  topics:\n    type: array\n    $rest:\n      url: https://api.textrazor.com/\n      method: POST\n      headers:\n        x-textrazor-key: YOURAPIKEY\n      body: extractors=topics&url={{url}}\n      vars:\n        url: "$.url"\n      extract: "$.response.topics[?(@.score > 0.9)]"\n    items:\n      type: string\n      $path: $.label\n')),(0,o.kt)("p",null,"What are we doing here??",(0,o.kt)("br",{parentName:"p"}),"\n","We're adding a field ",(0,o.kt)("inlineCode",{parentName:"p"},"topics")," that is an array of string, we populate it with a ",(0,o.kt)("inlineCode",{parentName:"p"},"$rest")," handler that calls the TextRazor api and extract the topics label, we used some filtering in the json path expression to take more relevant extracted topics (see ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/json-path/JsonPath"},"json-path docs"),")."),(0,o.kt)("p",null,"Save the yaml, and update the schema:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl -H "Content-Type: application/x-yaml" --data-binary @news.yaml http://localhost:6651/api/schema\n')),(0,o.kt)("p",null,"Before restarting the connector we're going to test the transformation with a dry run  using a json you can retrieve from the ",(0,o.kt)("inlineCode",{parentName:"p"},"joyce_import")," topic."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST "http://localhost:6651/api/import/dryrun" -H  "accept: application/json; charset=utf-8" -H  "X-Joyce-Schema-Id: joyce://schema/import/default.technology-news" -H  "Content-Type: application/json" -d \'{"feed":{"title":"Ars Technica","url":"http://feeds.arstechnica.com/arstechnica/index/"},"title":"A new formula may help Black patients\u2019 access to kidney care","id":"https://arstechnica.com/?p=1798361","link":"https://arstechnica.com/?p=1798361","content":"Algorithm made it harder for Black patients to qualify for transplants, other treatments.","author":"WIRED","date":"2021-09-25T11:22:23Z"}\'\n')),(0,o.kt)("p",null,"We are happy with the output, topics are extracted nicely."),(0,o.kt)("h3",{id:"enrich-with-open-graph-data"},"Enrich with open graph data"),(0,o.kt)("p",null,"We want to enrich more the results with some more info, a summary and an image for the article, how can we do it?"),(0,o.kt)("p",null,"Every news site, usually, includes ",(0,o.kt)("a",{parentName:"p",href:"https://ogp.me/"},"Open Graph")," tags, we could grab and use them to obtain what we want."),(0,o.kt)("p",null,"Joyce ships with a ",(0,o.kt)("inlineCode",{parentName:"p"},"$script")," handler that gives the ability to use scripting language to make transformations, currently you can write scripts in ",(0,o.kt)("inlineCode",{parentName:"p"},"python"),",  ",(0,o.kt)("inlineCode",{parentName:"p"},"javascript"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"groovy"),"."),(0,o.kt)("p",null,"We'll go with python.",(0,o.kt)("br",{parentName:"p"}),"\n","We need to obtain the http from the url, parse the html and get the metadata tags we need.   "),(0,o.kt)("p",null,"With some python/regex kung-fu we can write a small script to do that, add this property to the Schema:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'  metadata:\n    type: object\n    $script:\n      language: python\n      oneLine: false\n      code: |\n        import urllib\n        import re\n        html = urllib.urlopen(source[\'link\']).read()\n        img =  re.search("<meta[^\\>]*property=\\"og:image\\"[^\\>]*content=\\"(.+?)\\"[^\\>]*>", html)\n        desc = re.search("<meta[^\\>]*property=\\"og:description\\"[^\\>]*content=\\"(.+?)\\"[^\\>]*>", html)\n        return {\n          \'image\': img.group(1) if img is not None else "", \n          \'description\': desc.group(1) if desc is not None else ""\n        }\n    properties:\n      image:\n        type: string\n      description:\n        type: string\n')),(0,o.kt)("p",null,"Save the schema and try again a dryrun you should have as a result something like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "link": "https://arstechnica.com/?p=1798361",\n  "title": "A new formula may help Black patients\u2019 access to kidney care",\n  "date": "2021-09-25T11:22:23Z",\n  "summary": "Algorithm made it harder for Black patients to qualify for transplants, other treatments.",\n  "source": "Ars Technica",\n  "topics": [\n    "Information technology",\n    "Computing",\n    "Internet properties",\n    "Websites",\n    "World Wide Web",\n    "Cyberspace",\n    "Internet",\n    "Technology",\n    "Digital media",\n    "Multimedia",\n    "Communication",\n    "Software",\n    "Privacy",\n    "Mass media"\n  ],\n  "metadata": {\n    "image": "https://cdn.arstechnica.net/wp-content/uploads/2021/09/kidney-760x380.jpg",\n    "description": "Algorithm made it harder for Black patients to qualify for transplants, other treatments."\n  }\n}\n')),(0,o.kt)("p",null,"Now  we can resume operation of the kafka connector:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"curl -X  PUT http://localhost:6651/api/schema/import/default/technology-news/connectors/arstechnica/resume\n")),(0,o.kt)("h2",{id:"expose-the-rest-api"},"Expose the rest api"),(0,o.kt)("p",null,"Now we should tell ",(0,o.kt)("inlineCode",{parentName:"p"},"joyce-rest")," about the schema to expose it."),(0,o.kt)("p",null,"Edit ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," and add this to environment variables of ",(0,o.kt)("inlineCode",{parentName:"p"},"joyce-rest")," service:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"- SCHEMAS_SOURCE=/opt/schemas.json\n")),(0,o.kt)("p",null,"and this volume:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'volumes: \n  - "./schemas.json:/opt/schemas.json"\n')),(0,o.kt)("p",null,"then save this json to ",(0,o.kt)("inlineCode",{parentName:"p"},"schemas.json")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{   \n    "schemas": {\n        "news": {\n            "source": "http://import-gateway:6651/api/schema/import/default/technology-news"\n        }\n    }\n}\n')),(0,o.kt)("p",null,"Finally restart ",(0,o.kt)("inlineCode",{parentName:"p"},"joyce-rest")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose stop rest\ndocker-compose up -d rest\n")),(0,o.kt)("p",null,"You can call your new shiny api:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"curl http://localhost:6650/news?orderBy=desc&sortBy=date\n")),(0,o.kt)("p",null,"Yay, News!"),(0,o.kt)("h2",{id:"add-other-sources"},"Add other sources"),(0,o.kt)("p",null,"Time now to add another rss source, add this element to ",(0,o.kt)("inlineCode",{parentName:"p"},"$metadata.extra.connectors"),"  array:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'      - name: engadget\n        importKeyUid: link\n        config:\n          connector.class: "org.kaliy.kafka.connect.rss.RssSourceConnector"\n          rss.urls: "https://www.engadget.com/rss.xml"\n          topic: "joyce_import"\n')),(0,o.kt)("p",null,"Save the schema and send it to the import gateway, soon enough, by calling again the rest api you should see articles from engadget too."),(0,o.kt)("p",null,"Your schema now, should be something like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'$schema: https://joyce.sourcesense.com/v1/schema\n$metadata:\n  subtype: import\n  namespace: default\n  name: technology-news\n  description: Technology  news from rss feeds\n  development: true\n  collection: technology-news\n  validation: false\n  uid: link\n  extra:\n    connectors: \n      - name: arstechnica\n        importKeyUid: link\n        config:\n          connector.class: "org.kaliy.kafka.connect.rss.RssSourceConnector"\n          rss.urls: "http://feeds.arstechnica.com/arstechnica/index/"\n          topic: "joyce_import"\n      - name: engadget\n        importKeyUid: link\n        config:\n          connector.class: "org.kaliy.kafka.connect.rss.RssSourceConnector"\n          rss.urls: "https://www.engadget.com/rss.xml"\n          topic: "joyce_import"\ntype: object\nproperties:\n  link:\n    type: string\n  title:\n    type: string\n  date: \n    type: string\n  summary:\n    type: string\n    $path: $.content\n  source:\n    type: string\n    $path: $.feed.title\n  topics:\n    type: array\n    $rest:\n      url: https://api.textrazor.com/\n      method: POST\n      headers:\n        x-textrazor-key: 8023291c131f0afb1c5ef775356bf04d2ee3f1af39ba64a9e03c98c5\n      body: extractors=topics&url={{url}}\n      vars:\n        url: "$.link"\n      extract: "$.response.topics[?(@.score > 0.9)]"\n    items:\n      type: string\n      $path: $.label\n  metadata:\n    type: object\n    $script:\n      language: python\n      oneLine: false\n      code: |\n        import urllib\n        import re\n        html = urllib.urlopen(source[\'link\']).read()\n        img =  re.search("<meta[^\\>]*property=\\"og:image\\"[^\\>]*content=\\"(.+?)\\"[^\\>]*>", html)\n        desc =  re.search("<meta[^\\>]*property=\\"og:description\\"[^\\>]*content=\\"(.+?)\\"[^\\>]*>", html)\n        return {\n          \'image\': img.group(1) if img is not None else "", \n          \'description\': desc.group(1) if desc is not None else ""\n        }\n    properties:\n      image:\n        type: string\n      description:\n        type: string\n')),(0,o.kt)("h2",{id:"conclusion"},"Conclusion"),(0,o.kt)("p",null,"You know how to add the third source right?",(0,o.kt)("br",{parentName:"p"}),"\n","s\nHow powerful it is to have ",(0,o.kt)("strong",{parentName:"p"},"input source"),", ",(0,o.kt)("strong",{parentName:"p"},"modeling data")," and ",(0,o.kt)("strong",{parentName:"p"},"transformation")," in a single, declarative file?",(0,o.kt)("br",{parentName:"p"}),"\n","It is the only thing you should version, no code, just configuration, and you have enriched news news from multiple rss sources."))}p.isMDXComponent=!0}}]);